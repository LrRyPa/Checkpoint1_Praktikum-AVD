# -*- coding: utf-8 -*-
"""AVD A2_CheckPoint 2_Larry Polin Anugrah

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1irwG0qBMBiocsc-buyeI_G97EYVcarUK

# Checkpoint 2

## Lanjutan Data Undestanding

sumber dataset: https://www.kaggle.com/datasets/fahmidachowdhury/e-commerce-sales-analysis/data
"""

import pandas as pd

data = pd.read_csv("/content/ecommerce_sales_analysis.csv")
data

"""### Tipe data kolom"""

print("Tipe data untuk setiap kolom: \n")
data.dtypes

"""### Jumlah baris dan kolom
* (baris, kolom)
"""

data.shape

"""### Statistik Deskriptif"""

print("Statistik deskriptif dataset ini: \n")
data.describe()

"""### Korelasi"""

data.corr(numeric_only=True)

"""## Data Preparation
sumber dataset: https://www.kaggle.com/datasets/fahmidachowdhury/e-commerce-sales-analysis/data

### Pengcekkan Missing Values
"""

data.isna().sum() / len(data) * 100

"""Pada dataset ini tidak memiliki missing values untuk setiap kolomnya

### Pengecekkan Duplikat
"""

data[data.duplicated()]

"""Pada dataset ini tidak ditemukan data yang duplikat

### Pengecekkan Outliers
"""

results = []

cols = data.select_dtypes(include=['float64', 'int64'])

for col in cols:
  q1 = data[col].quantile(0.25)
  q3 = data[col].quantile(0.75)
  iqr = q3 - q1
  lower_bound = q1 - 1.5*iqr
  upper_bound = q3 + 1.5*iqr
  outliers = data[(data[col] < lower_bound) | (data[col] > upper_bound)]
  percent_outliers = (len(outliers)/len(data))*100
  results.append({'Kolom': col, 'Persentase Outliers': percent_outliers})

# Dataframe dari list hasil
results_df = pd.DataFrame(results)
results_df.set_index('Kolom', inplace=True)
results_df = results_df.rename_axis(None, axis=0).rename_axis('Kolom', axis=1)

# Tampilkan dataframe
display(results_df)

"""Pada dataset ini tidak ditemukan adanya outliers

### Pengecekkan Inconsistent Values

* Pengecekkan nama kategori
"""

print(data['category'].unique())

"""* Pengecekkan rentang nilai (1-5)"""

print(data['review_score'].min(), data['review_score'].max())

"""* Pengecekkan nilai numerik pada kolom price, review_score"""

print(f"Jumlah nilai tidak valid pada kolom price: \n {pd.to_numeric(data['price'], errors='coerce').isnull().sum()}")
print(f"Jumlah nilai tidak valid pada kolom review_score: \n {pd.to_numeric(data['review_score'], errors='coerce').isnull().sum()}")

print("Jumlah nilai tidak valid pada kolom sales_month_1 - 12:")
cols = [f'sales_month_{x}' for x in range(1, 13)]
for col in cols:
  print(pd.to_numeric(data[col], errors='coerce').isnull().sum())

"""Pada dataset ini tidak ditemukan adanya inconsistent values

### Construct Data

* Penambahan kolom **total_sales** (Total penjualan setiap produk dalam setahun) dan kolom **rangking_sales** (peringkat setiap produk berdasarkan total penjualan)
"""

data['total_sales'] = data[[f'sales_month_{x}' for x in range(1, 13)]].sum(axis=1)
data['ranking_sales'] = data['total_sales'].rank(method='dense', ascending=False).astype(int)
data

"""* Penambahan kolom **price_per_unit_sales** (rasio harga produk dan volume penjualan)"""

data['price_per_unit_sales'] = data['price'] / data['total_sales']
data

"""* Menambahkan kolom **peak_sales_month** (bulan dengan penjualan tertinggi pada setiap produk)"""

data['peak_sales_month'] = data[[f'sales_month_{x}' for x in range(1, 13)]].idxmax(axis=1)
data

"""* Penambahan kolom **total_review_score** (bobot penilaian setiap produk)"""

data['total_review_score'] = data['review_score'] * data['review_count']
data

"""### Data Reduction

* Penghapusan kolom **product_name** karena pada kolom "product_id" sudah mengidentifikasi setiap produk
"""

data = data.drop('product_name', axis=1)
data

"""### Menyimpan Data"""

save = "data_ecommerce_sales.xlsx"
data.to_excel(save, index=False)

print(f"Data berhasil disimpan ke dalam: {save}")